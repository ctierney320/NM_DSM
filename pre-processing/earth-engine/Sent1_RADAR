//////// Code for processing Sentinel1 RADAR data in Google Earth Engine with Java
////// code needs a shapefile boundary of the NM DSM study area named "nmdsmbound"
////// and a rectangle polygon of the study area named "NM_DSM_recbound"
////// The data collection needs to be imported: "s1_grd: ImageCollection COPERNICUS/S1_GRD



//set up area of interest boundary
// remember to change the name of the export folder to match the area variable
var area = bound; 

//In the future the code at: https://geohackweek.github.io/GoogleEarthEngine/03-load-imagery/ could be good because
//it shows how to filter by HUC boundary. 

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sentinel-1 Radar processing
// // Create date range filters. Comment out unused lines!
// var GrowingSeason15 = ee.Filter.date('2015-05-01','2015-07-01')
// var GrowingSeason16 = ee.Filter.date('2016-05-01','2016-07-01')
// var GrowingSeason17 = ee.Filter.date('2017-05-01','2017-07-01')
// var GrowingSeason18 = ee.Filter.date('2018-05-01','2018-07-01')
// var GrowingSeason19 = ee.Filter.date('2019-05-01','2019-07-01')
// var GrowingSeason20 = ee.Filter.date('2020-05-01','2020-07-01')

// var GrowingSeasonAll = ee.Filter.or(GrowingSeason15,GrowingSeason16,GrowingSeason17) //join filters



// Filter sentinel 1 GRD image collection by sensor characteristics, date and area
var grd_coll = s1_grd.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
                      .filter(ee.Filter.eq('instrumentMode', 'IW'))
                      .filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
                      .filterDate('2015-01-01','2020-12-31')
                      // .filter(GrowingSeasonAll)
                      .filterBounds(area);

//Remove image/scene border noise for 'cleaner' mosaics
//functions to mask out image edges using incident angle, valid range: 30deg<=angle<=45deg
var mask_gt30 = function(image){
  var ang = image.select(['angle']);
  return image.updateMask(ang.gt(30.63993));
};
var mask_lt45 = function(image){
  var ang = image.select(['angle']);
  return image.updateMask(ang.lt(45.53993));
};

// function to remove low-entropy edges
function maskLowEntropy(image) { 
  var bad = image.select(0).multiply(10000).toInt().entropy(ee.Kernel.circle(5)).lt(3.2);
  return image.updateMask(image.mask().multiply(bad.focal_max(5).not()));
} 

// function to clip edge by 15km 
function erodeGeometry(image) {
  return image.clip(image.geometry().buffer(-15000)).clipToCollection(area);
}

//apply all masking functions to each image in collection
var masked1 = grd_coll.map(erodeGeometry);
var masked2 = masked1.map(maskLowEntropy);
var masked3 = masked2.map(mask_gt30);
var masked4 = masked3.map(mask_lt45);

//Normalize image radiometry to correct  inbalance between scenes. Use image.select(0) for VV band.
var toGamma0 = function(image) {
    return image.select(0).subtract(image.select('angle').multiply(Math.PI/180.0).cos().log10().multiply(10.0));
  };
var coll_norm =  masked4.map(toGamma0);

// Compute overall median and std dev of VV backscatter
var med_vv = coll_norm.median().toFloat().set('name','mean_vv').select([0],['mean_vv']);
var std_vv = coll_norm.reduce(ee.Reducer.stdDev()).toFloat().set('name','stddev_vv').select([0],['std_vv']);

// Export files
Export.image.toDrive({
        image:med_vv,
        description: 'med_vv',
        folder: 'Sent1_RADAR',
        fileNamePrefix: 'med_vv',
        scale: 30,
        region: area.geometry().bounds(),
        maxPixels: 1e13}); //originally 1e13

Export.image.toDrive({
        image:std_vv,
        description: 'std_vv',
        folder: 'Sent1_RADAR',
        fileNamePrefix: 'std_vv',
        scale: 30,
        region: area.geometry().bounds(),
        maxPixels: 1e13});


//Visualize all layers
Map.addLayer(area);
Map.addLayer({eeObject:med_vv,visParams:{min:-20,max:-10},name:'median vv'});
Map.addLayer({eeObject:std_vv,visParams:{min:0,max:5},name:'stddev vv'});

